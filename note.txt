Create a number guessing game to generate a number between the range of 1 and 2. The game should prompt users for their username.
Set range as function parameter and prompt the player to predict the generated number between the given range. 
At a correct guess, the game should award the player a point and move them to stage 2 by increasing the range limit value by 1, e.g. range is from 1 and 3 for stage 2 and so on. Connect replit account to GitHub and save your program on GitHub. Ensure that your replit link is written in your GitHub repo readme file.
 Submit GitHub link to the saved project.

 User Stories
 - user should see a welcome page, Followed by a prompt to enter username.
 - after name input, user should see 'start' with user points = 0
 - When start is clicked, user should see game page.
 - Game page should include name, points, game title, stage, 'guess the num', input field, hint, exit..
 - When user enters input(number) user should see a correct or wrong feedback.
 - if wrong? exit or try again.
 - if correct? points and stage should update to plus 1. 
 - guess range should increase by the next consecutive digit.
 - on exit press game should display an "exit page"


 //perfect Javascript for new user interface
 //Build JS for Game, refactor old code
 // fuck up that CSS


 OLD CODE
 let guessRange = [1, 2];
let numOfPoints = document.getElementById("userpoints").innerHTML;
let stageNum = document.getElementById("userstage").innerHTML;
numOfPoints = 0
stageNum = 1
var inPlay;
let form = document.getElementById("form");
let startDisplay = '<button id="start-btn">yolo</button>';
let start = document.getElementById("start-btn");
let end = document.getElementById("end-btn");
let userName = document.getElementById('user-name').value

// to control html body, the conditional rendering of the start button or the game page
// k = the correct guess, K-index = the position of the correct guess on the array.



const gameStart = () => {
  inPlay = true;
  document.getElementById("game-body").hidden = false;
  start.hidden = true;
};

const gameEnd = () => {
  winOrLose(numOfPoints, stageNum, inPlay);
  inPlay = !inPlay;
  stageNum = 1;
  numOfPoints = 0;
  document.getElementById("game-body").hidden = true;
  start.hidden = false;
}

start.addEventListener("click", gameStart);
end.addEventListener("click", gameEnd);

function askName() {
  let username = sessionStorage.getItem("username");
  if (username === null) {
    username = prompt("Enter your name: ");
  }
  if (username != null) {
    document.getElementById("userpara").innerHTML = username;
    sessionStorage.setItem("username", username);
  }
  console.log(username);
}

function hint() {
  document.getElementById("guessrange").innerHTML = `${guessRange[0]} thru ${
    guessRange[guessRange.length - 1]
  }`;
}
function winOrLose(points, stage, isGameOn) {
  let winDisplay = document.getElementById("winDisplay");
  isGameOn
  //add vanishing +1 
  //steady display of point and stage
    ? (winDisplay.innerHTML = `Correct! You now have ${points} points, move to stage ${stage}`)
    : (winDisplay.innerHTML = `Wrong! Try Again?`);
}

const guessCheck = () => {
  let userInput = document.getElementById("userInput").value;
  let kIndex = Math.floor(Math.random() * guessRange.length);
  let k = guessRange[kIndex];
  console.log(userInput, k)
  console.log("k is ", k, "and user guessed ", userInput);
  if (userInput != null && k == Number(userInput)) {
    numOfPoints++;
    stageNum++;
    guessRange.push(guessRange[guessRange.length - 1] + 1);
    inPlay = true;
    hint();
  } else {
    inPlay = false;
  }

  form.reset();
  winOrLose(numOfPoints, stageNum, inPlay);
};

const refreshPage = () => {
  window.location.reload();
};

g
